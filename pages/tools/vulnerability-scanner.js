import { useState } from 'react';
import Layout from '../../components/Layout';
import { Alert, Button, Form, Card, Spinner, Badge, Dropdown, ButtonGroup, Row, Col } from 'react-bootstrap';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faFileExport, faFileCsv, faFileCode, faFilePdf, faFileAlt } from '@fortawesome/free-solid-svg-icons';

export default function VulnerabilityScanner() {
  const [target, setTarget] = useState('');
  const [scanType, setScanType] = useState('quick');
  const [loading, setLoading] = useState(false);
  const [results, setResults] = useState(null);
  const [error, setError] = useState('');
  const [scanHistory, setScanHistory] = useState([]);

  const handleScan = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setResults(null);

    try {
      const response = await fetch('/api/vulnerability-scan', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ target, scanType }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || 'Tarama sırasında bir hata oluştu');
      }

      setResults(data);
      setScanHistory(prev => [...prev, { target, timestamp: new Date().toISOString(), findings: data.vulnerabilities?.length || 0 }]);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const exportToCSV = () => {
    if (!results) return;

    let csvContent = "data:text/csv;charset=utf-8,";
    csvContent += "Target,Scan Type,Scan Duration,Vulnerability ID,Title,Severity,CVE ID,CVSS Score,Description,Affected Components,Remediation\n";

    results.vulnerabilities.forEach(vuln => {
      const row = [
        results.target,
        scanType,
        results.scanDuration,
        vuln.id,
        vuln.title,
        vuln.severity,
        vuln.cveId,
        vuln.cvssScore,
        `"${vuln.description.replace(/"/g, '""')}"`,
        `"${vuln.affectedComponents.replace(/"/g, '""')}"`,
        `"${vuln.remediation ? vuln.remediation.replace(/"/g, '""') : ''}"`
      ];
      csvContent += row.join(",") + "\n";
    });

    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", `vulnerability_scan_${target}_${new Date().toISOString().slice(0,10)}.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const exportToXML = () => {
    if (!results) return;

    let xmlContent = '<?xml version="1.0" encoding="UTF-8" ?>\n';
    xmlContent += '<VulnerabilityScan>\n';
    xmlContent += `  <Target>${results.target}</Target>\n`;
    xmlContent += `  <ScanType>${scanType}</ScanType>\n`;
    xmlContent += `  <ScanDuration>${results.scanDuration}</ScanDuration>\n`;
    xmlContent += '  <Vulnerabilities>\n';

    results.vulnerabilities.forEach(vuln => {
      xmlContent += '    <Vulnerability>\n';
      xmlContent += `      <ID>${vuln.id}</ID>\n`;
      xmlContent += `      <Title>${escapeXML(vuln.title)}</Title>\n`;
      xmlContent += `      <Severity>${vuln.severity}</Severity>\n`;
      xmlContent += `      <CVEID>${vuln.cveId}</CVEID>\n`;
      xmlContent += `      <CVSSScore>${vuln.cvssScore}</CVSSScore>\n`;
      xmlContent += `      <Description>${escapeXML(vuln.description)}</Description>\n`;
      xmlContent += `      <AffectedComponents>${escapeXML(vuln.affectedComponents)}</AffectedComponents>\n`;
      if (vuln.remediation) {
        xmlContent += `      <Remediation>${escapeXML(vuln.remediation)}</Remediation>\n`;
      }
      xmlContent += '    </Vulnerability>\n';
    });

    xmlContent += '  </Vulnerabilities>\n';
    xmlContent += '</VulnerabilityScan>';

    const blob = new Blob([xmlContent], { type: 'application/xml' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.setAttribute("href", url);
    link.setAttribute("download", `vulnerability_scan_${target}_${new Date().toISOString().slice(0,10)}.xml`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const exportToJSON = () => {
    if (!results) return;

    const exportData = {
      target: results.target,
      scanType: scanType,
      scanDuration: results.scanDuration,
      timestamp: new Date().toISOString(),
      vulnerabilities: results.vulnerabilities
    };

    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.setAttribute("href", url);
    link.setAttribute("download", `vulnerability_scan_${target}_${new Date().toISOString().slice(0,10)}.json`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const exportToTXT = () => {
    if (!results) return;

    let txtContent = `Zafiyet Tarama Raporu\n`;
    txtContent += `===================\n\n`;
    txtContent += `Hedef: ${results.target}\n`;
    txtContent += `Tarama Tipi: ${scanType}\n`;
    txtContent += `Tarama Süresi: ${results.scanDuration} saniye\n`;
    txtContent += `Tarih: ${new Date().toLocaleString()}\n\n`;
    txtContent += `Bulunan Zafiyetler (${results.vulnerabilities.length}):\n`;
    txtContent += `===================\n\n`;

    results.vulnerabilities.forEach((vuln, index) => {
      txtContent += `[${index + 1}] ${vuln.title}\n`;
      txtContent += `Önem Derecesi: ${vuln.severity}\n`;
      txtContent += `CVE ID: ${vuln.cveId}\n`;
      txtContent += `CVSS Puanı: ${vuln.cvssScore}\n`;
      txtContent += `Açıklama: ${vuln.description}\n`;
      txtContent += `Etkilenen Bileşenler: ${vuln.affectedComponents}\n`;
      if (vuln.remediation) {
        txtContent += `Çözüm Önerisi: ${vuln.remediation}\n`;
      }
      txtContent += `\n`;
    });

    const blob = new Blob([txtContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.setAttribute("href", url);
    link.setAttribute("download", `vulnerability_scan_${target}_${new Date().toISOString().slice(0,10)}.txt`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  // XML için özel karakterleri kaçış fonksiyonu
  const escapeXML = (str) => {
    return str
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&apos;');
  };

  const renderVulnerability = (vuln) => (
    <Card key={vuln.id} className="mb-3 bg-dark text-light">
      <Card.Body>
        <Card.Title className="d-flex justify-content-between align-items-center">
          <span>{vuln.title}</span>
          <Badge bg={vuln.severity === 'High' ? 'danger' : vuln.severity === 'Medium' ? 'warning' : 'info'}>
            {vuln.severity}
          </Badge>
        </Card.Title>
        <Card.Text>
          <strong>CVE ID:</strong> {vuln.cveId}<br />
          <strong>CVSS Score:</strong> {vuln.cvssScore}<br />
          <strong>Description:</strong> {vuln.description}<br />
          <strong>Affected Components:</strong> {vuln.affectedComponents}
        </Card.Text>
        {vuln.remediation && (
          <Alert variant="info">
            <strong>Çözüm Önerisi:</strong><br />
            {vuln.remediation}
          </Alert>
        )}
      </Card.Body>
    </Card>
  );

  return (
    <Layout>
      <h1 className="mb-4">Zafiyet Tarayıcı</h1>
      
      <Card className="bg-dark text-light mb-4">
        <Card.Body>
          <Form onSubmit={handleScan}>
            <Form.Group className="mb-3">
              <Form.Label>Hedef URL veya IP</Form.Label>
              <Form.Control
                type="text"
                value={target}
                onChange={(e) => setTarget(e.target.value)}
                placeholder="örn: example.com veya 192.168.1.1"
                required
              />
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Tarama Tipi</Form.Label>
              <Form.Select
                value={scanType}
                onChange={(e) => setScanType(e.target.value)}
              >
                <option value="quick">Hızlı Tarama</option>
                <option value="full">Tam Tarama</option>
                <option value="custom">Özel Tarama</option>
              </Form.Select>
            </Form.Group>

            <Button type="submit" variant="primary" disabled={loading}>
              {loading ? (
                <>
                  <Spinner animation="border" size="sm" className="me-2" />
                  Taranıyor...
                </>
              ) : (
                'Taramayı Başlat'
              )}
            </Button>
          </Form>
        </Card.Body>
      </Card>

      {error && (
        <Alert variant="danger" className="mb-4">
          {error}
        </Alert>
      )}

      {results && (
        <div className="mb-4">
          <Row className="mb-3">
            <Col>
              <h2>Tarama Sonuçları</h2>
            </Col>
            <Col xs="auto">
              <Dropdown as={ButtonGroup}>
                <Button variant="success" disabled={!results}>
                  <FontAwesomeIcon icon={faFileExport} className="me-2" />
                  Dışa Aktar
                </Button>
                <Dropdown.Toggle split variant="success" disabled={!results} />
                <Dropdown.Menu className="bg-dark">
                  <Dropdown.Item onClick={exportToCSV} className="text-light">
                    <FontAwesomeIcon icon={faFileCsv} className="me-2" />
                    CSV Formatında İndir
                  </Dropdown.Item>
                  <Dropdown.Item onClick={exportToXML} className="text-light">
                    <FontAwesomeIcon icon={faFileCode} className="me-2" />
                    XML Formatında İndir
                  </Dropdown.Item>
                  <Dropdown.Item onClick={exportToJSON} className="text-light">
                    <FontAwesomeIcon icon={faFileCode} className="me-2" />
                    JSON Formatında İndir
                  </Dropdown.Item>
                  <Dropdown.Item onClick={exportToTXT} className="text-light">
                    <FontAwesomeIcon icon={faFileAlt} className="me-2" />
                    TXT Formatında İndir
                  </Dropdown.Item>
                </Dropdown.Menu>
              </Dropdown>
            </Col>
          </Row>
          
          <Alert variant="info">
            <strong>Özet:</strong><br />
            Taranan Host: {results.target}<br />
            Bulunan Zafiyet Sayısı: {results.vulnerabilities?.length || 0}<br />
            Tarama Süresi: {results.scanDuration} saniye
          </Alert>

          {results.vulnerabilities?.map(renderVulnerability)}
        </div>
      )}

      {scanHistory.length > 0 && (
        <div>
          <h3>Tarama Geçmişi</h3>
          <Card className="bg-dark text-light">
            <Card.Body>
              <div className="table-responsive">
                <table className="table table-dark">
                  <thead>
                    <tr>
                      <th>Hedef</th>
                      <th>Tarih</th>
                      <th>Bulunan Zafiyetler</th>
                    </tr>
                  </thead>
                  <tbody>
                    {scanHistory.map((scan, index) => (
                      <tr key={index}>
                        <td>{scan.target}</td>
                        <td>{new Date(scan.timestamp).toLocaleString()}</td>
                        <td>{scan.findings}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </Card.Body>
          </Card>
        </div>
      )}
    </Layout>
  );
} 
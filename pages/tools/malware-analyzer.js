import { useState } from 'react';
import Layout from '../../components/Layout';
import { Card, Button, Form, Alert, Table, Badge, Spinner, Row, Col, ProgressBar } from 'react-bootstrap';

export default function MalwareAnalyzer() {
  const [file, setFile] = useState(null);
  const [fileName, setFileName] = useState('');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [results, setResults] = useState(null);
  const [error, setError] = useState('');
  const [analysisProgress, setAnalysisProgress] = useState(0);

  const handleFileChange = (e) => {
    if (e.target.files.length > 0) {
      setFile(e.target.files[0]);
      setFileName(e.target.files[0].name);
      setError('');
    }
  };

  const handleAnalyze = async (e) => {
    e.preventDefault();
    
    if (!file) {
      setError('Lütfen analiz edilecek bir dosya seçin');
      return;
    }

    setIsAnalyzing(true);
    setResults(null);
    setError('');

    // Simüle edilmiş analiz süreci
    const simulateAnalysis = () => {
      let progress = 0;
      const interval = setInterval(() => {
        progress += 5;
        setAnalysisProgress(progress);
        
        if (progress >= 100) {
          clearInterval(interval);
          
          // Simüle edilmiş sonuçlar
          const mockResults = {
            fileName: fileName,
            fileSize: file.size,
            fileType: file.type || 'Bilinmeyen',
            scanTime: new Date().toLocaleString(),
            malwareDetected: Math.random() > 0.7,
            threatLevel: Math.random() > 0.7 ? 'Yüksek' : Math.random() > 0.4 ? 'Orta' : 'Düşük',
            signatures: [
              { name: 'Trojan.Generic', description: 'Genel Truva atı imzası', severity: 'Yüksek' },
              { name: 'Adware.BrowserModifier', description: 'Tarayıcı ayarlarını değiştiren reklam yazılımı', severity: 'Orta' },
              { name: 'PUP.Optional', description: 'Potansiyel istenmeyen program', severity: 'Düşük' }
            ].filter(() => Math.random() > 0.5),
            behaviors: [
              { type: 'Dosya Sistemi', action: 'Sistem dosyalarına erişim', risk: 'Orta' },
              { type: 'Registry', action: 'Başlangıç kayıt defteri değişikliği', risk: 'Yüksek' },
              { type: 'Ağ', action: 'Şüpheli IP adreslerine bağlantı', risk: 'Yüksek' },
              { type: 'Bellek', action: 'Diğer süreçlere enjeksiyon', risk: 'Yüksek' }
            ].filter(() => Math.random() > 0.3)
          };
          
          setResults(mockResults);
          setIsAnalyzing(false);
        }
      }, 200);
    };

    simulateAnalysis();
  };

  return (
    <Layout>
      <h1 className="mb-4">Zararlı Yazılım Analizi</h1>

      <Card className="bg-dark text-light mb-4">
        <Card.Body>
          <Form onSubmit={handleAnalyze}>
            <Form.Group className="mb-3">
              <Form.Label>Analiz Edilecek Dosya</Form.Label>
              <Form.Control 
                type="file" 
                onChange={handleFileChange}
                disabled={isAnalyzing}
              />
              <Form.Text className="text-muted">
                Analiz için bir dosya yükleyin (max: 50MB)
              </Form.Text>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Analiz Tipi</Form.Label>
              <Form.Select disabled={isAnalyzing}>
                <option value="full">Tam Analiz (Statik + Dinamik)</option>
                <option value="static">Sadece Statik Analiz</option>
                <option value="dynamic">Sadece Dinamik Analiz</option>
              </Form.Select>
            </Form.Group>

            <Button 
              variant="primary" 
              type="submit" 
              disabled={!file || isAnalyzing}
              className="mt-2"
            >
              {isAnalyzing ? (
                <>
                  <Spinner animation="border" size="sm" className="me-2" />
                  Analiz Ediliyor...
                </>
              ) : 'Analiz Et'}
            </Button>
          </Form>

          {error && (
            <Alert variant="danger" className="mt-3">
              {error}
            </Alert>
          )}

          {isAnalyzing && (
            <div className="mt-4">
              <p>Dosya analiz ediliyor: {fileName}</p>
              <ProgressBar 
                animated 
                now={analysisProgress} 
                label={`${analysisProgress}%`} 
                variant={
                  analysisProgress < 30 ? "info" : 
                  analysisProgress < 70 ? "warning" : 
                  "success"
                }
                className="mb-3"
              />
              <p className="small text-muted">
                {analysisProgress < 30 ? "Dosya taranıyor..." : 
                 analysisProgress < 70 ? "Davranış analizi yapılıyor..." : 
                 "Sonuçlar hazırlanıyor..."}
              </p>
            </div>
          )}
        </Card.Body>
      </Card>

      {results && (
        <>
          <Card className="bg-dark text-light mb-4">
            <Card.Header>
              <h3 className="mb-0">Analiz Sonuçları</h3>
            </Card.Header>
            <Card.Body>
              <Row>
                <Col md={6}>
                  <h4>Dosya Bilgileri</h4>
                  <Table variant="dark" bordered>
                    <tbody>
                      <tr>
                        <td>Dosya Adı</td>
                        <td>{results.fileName}</td>
                      </tr>
                      <tr>
                        <td>Boyut</td>
                        <td>{(results.fileSize / 1024).toFixed(2)} KB</td>
                      </tr>
                      <tr>
                        <td>Tür</td>
                        <td>{results.fileType}</td>
                      </tr>
                      <tr>
                        <td>Tarama Zamanı</td>
                        <td>{results.scanTime}</td>
                      </tr>
                    </tbody>
                  </Table>
                </Col>
                <Col md={6}>
                  <h4>Tehdit Özeti</h4>
                  <div className="d-flex align-items-center mb-3">
                    <div className="me-3">
                      <span className="display-4">
                        {results.malwareDetected ? (
                          <span className="text-danger">⚠️</span>
                        ) : (
                          <span className="text-success">✓</span>
                        )}
                      </span>
                    </div>
                    <div>
                      <h5>
                        {results.malwareDetected ? 'Tehdit Tespit Edildi' : 'Tehdit Tespit Edilmedi'}
                      </h5>
                      <Badge bg={
                        results.threatLevel === 'Yüksek' ? 'danger' :
                        results.threatLevel === 'Orta' ? 'warning' : 'info'
                      }>
                        {results.threatLevel} Risk
                      </Badge>
                    </div>
                  </div>
                </Col>
              </Row>

              {results.signatures && results.signatures.length > 0 && (
                <div className="mt-4">
                  <h4>Tespit Edilen İmzalar</h4>
                  <Table variant="dark" striped bordered hover>
                    <thead>
                      <tr>
                        <th>İmza Adı</th>
                        <th>Açıklama</th>
                        <th>Şiddet</th>
                      </tr>
                    </thead>
                    <tbody>
                      {results.signatures.map((sig, index) => (
                        <tr key={index}>
                          <td>{sig.name}</td>
                          <td>{sig.description}</td>
                          <td>
                            <Badge bg={
                              sig.severity === 'Yüksek' ? 'danger' :
                              sig.severity === 'Orta' ? 'warning' : 'info'
                            }>
                              {sig.severity}
                            </Badge>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </Table>
                </div>
              )}

              {results.behaviors && results.behaviors.length > 0 && (
                <div className="mt-4">
                  <h4>Tespit Edilen Davranışlar</h4>
                  <Table variant="dark" striped bordered hover>
                    <thead>
                      <tr>
                        <th>Tür</th>
                        <th>Eylem</th>
                        <th>Risk</th>
                      </tr>
                    </thead>
                    <tbody>
                      {results.behaviors.map((behavior, index) => (
                        <tr key={index}>
                          <td>{behavior.type}</td>
                          <td>{behavior.action}</td>
                          <td>
                            <Badge bg={
                              behavior.risk === 'Yüksek' ? 'danger' :
                              behavior.risk === 'Orta' ? 'warning' : 'info'
                            }>
                              {behavior.risk}
                            </Badge>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </Table>
                </div>
              )}
            </Card.Body>
          </Card>

          <Card className="bg-dark text-light mb-4">
            <Card.Header>
              <h3 className="mb-0">Öneriler</h3>
            </Card.Header>
            <Card.Body>
              {results.malwareDetected ? (
                <Alert variant="warning">
                  <h5>Tehdit Tespit Edildi!</h5>
                  <p>Aşağıdaki adımları izlemenizi öneririz:</p>
                  <ol>
                    <li>Dosyayı açmayın veya çalıştırmayın</li>
                    <li>Antivirüs yazılımınızla tam sistem taraması yapın</li>
                    <li>Şüpheli dosyayı karantinaya alın veya silin</li>
                    <li>Sistem güvenliğinizi gözden geçirin</li>
                  </ol>
                </Alert>
              ) : (
                <Alert variant="success">
                  <h5>Tehdit Tespit Edilmedi</h5>
                  <p>Dosya güvenli görünüyor, ancak her zaman dikkatli olun:</p>
                  <ul>
                    <li>Bilinmeyen kaynaklardan gelen dosyalara dikkat edin</li>
                    <li>Antivirüs yazılımınızı güncel tutun</li>
                    <li>Düzenli sistem taramaları yapın</li>
                  </ul>
                </Alert>
              )}
            </Card.Body>
          </Card>
        </>
      )}
    </Layout>
  );
} 